/**
 * Subscribe represents our "streaming" subscription protocol.
 *
 * There is only one important RPC currently which models a generic description
 * to a topic-based pub-sub system. The state store published updates as Events.
 * The majority of this file is defining those event types.
 */
syntax = "proto3";

package stream;

import "structs.proto";

service Consul {
    // Susbscribe is a generic event streaming mechanism used for efficiently
    // requesting a specific result snapshot and then following updates that
    // affect that snapshot.
    rpc Subscribe(SubscribeRequest) returns (stream Event) {}

    // Test is only used internally for testing connectivity/balancing logic.
    rpc Test(TestRequest) returns (TestResponse) {}
} 

enum Topic {
    ServiceHealth = 0;
    ServiceHealthConnect = 1;
    ACLTokens = 2;
    ACLPolicies = 3;
    ACLRoles = 4;
}

message SubscribeRequest {
    Topic Topic = 1;
    string Key = 2;
    string Token = 3;
    uint64 Index = 4;
    string Filter = 5;
    string Datacenter = 6;
}

message Event {
    Topic Topic = 1;
    string Key = 2;
    uint64 Index = 3;
    repeated ACLRule RequiredACLs = 4;
    oneof Payload {
        ServiceHealthUpdate ServiceHealth = 5;
        ACLTokenUpdate ACLToken = 6;
        ACLPolicyUpdate ACLPolicy = 7;
        ACLRoleUpdate ACLRole = 8;

        // EndOfSnapshot indicates the event stream for the initial snapshot has
        // ended.
        bool EndOfSnapshot = 9;

        // ResumeStream indicates that the client is still up-to-date, there
        // will be no snapshot, and the rest of the stream will be individual
        // update events.
        bool ResumeStream = 10;

        // ReloadStream indicates the client should re-start the Subscribe call.
        bool ReloadStream = 11;

        // EventBatch is a set of events. This is typically used as the payload
        // type where multiple events are emitted in a single topic and raft
        // index (e.g. transactional updates). In this case the Topic and Index
        // values of all events will match and the whole set should be delivered
        // and consumed atomically.
        EventBatch EventBatch = 12;
    }
}

message EventBatch {
    repeated Event Events = 1;
}

enum CatalogOp {
    Register = 0;
    Deregister = 1;
}

enum ACLOp {
    Update = 0;
    Delete = 1;
}

enum ACLResource {
    ServiceACL = 0;
    NodeACL = 1;
}

message ACLRule {
    ACLResource Resource = 1;
    string Segment = 2;
}

message ServiceHealthUpdate {
    CatalogOp Op = 1;
    CheckServiceNode CheckServiceNode = 2;
}

message ACLTokenUpdate {
    ACLOp Op = 1;
    ACLToken Token = 2;
}

message ACLPolicyUpdate {
    ACLOp Op = 1;
    string PolicyID = 2;
}

message ACLRoleUpdate {
    ACLOp Op = 1;
    string RoleID = 2;
}

message TestRequest {
    string Datacenter = 1;
}
message TestResponse {
    string ServerName = 1;
}